{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import SimpleITK as sitk\n",
    "import radiomics\n",
    "from radiomics import firstorder, glcm, ngtdm, shape, imageoperations, getFeatureClasses\n",
    "import os, glob, shutil, tempfile\n",
    "import numpy as np\n",
    "import torch\n",
    "import torch.nn as nn\n",
    "import torch.nn.functional as F\n",
    "import torchsummary as ts\n",
    "import monai\n",
    "import logging\n",
    "import nibabel as nib\n",
    "import six\n",
    "\n",
    "from monai.config import print_config\n",
    "from monai.data import (\n",
    "    ArrayDataset,\n",
    "    GridPatchDataset,\n",
    "    PatchIter,\n",
    "    PILReader\n",
    "    )\n",
    "from monai.transforms import (\n",
    "    Compose,\n",
    "    LoadImage,\n",
    "    LoadImaged,\n",
    "    RandSpatialCrop,\n",
    "    ScaleIntensity,\n",
    "    EnsureType,\n",
    ")\n",
    "from monai.utils import first\n",
    "print_config()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "path = \"./Data/\"\n",
    "temp_list = os.listdir(path)\n",
    "cmb_list = []\n",
    "swi_list = []\n",
    "seg_list = []\n",
    "for i, name in enumerate(temp_list):\n",
    "    if \".\" in  name:\n",
    "        temp_list.pop(i)\n",
    "    else:\n",
    "        cmb_list.append(sitk.ReadImage(path+name+\"/cmb.nii.gz\"))\n",
    "        swi_list.append(sitk.ReadImage(path+name+\"/swi.nii.gz\"))\n",
    "        seg_list.append(sitk.ReadImage(path+name+\"/lm-swi.nii.gz\"))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Loggers\n",
    "logger = radiomics.logger\n",
    "logger.setLevel(logging.DEBUG)\n",
    "handler = logging.FileHandler(filename=\"testLog.txt\", mode=\"w\")\n",
    "formatter = logging.Formatter(\"%(levelname)s:%(name)s: %(message)s\")\n",
    "handler.setFormatter(formatter)\n",
    "logger.addHandler(handler)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Radiomics extractor setting\n",
    "lb1_settings = {\n",
    "    \"binWidth\":10,\n",
    "    \"minimumROIDimensions\":2,\n",
    "    \"minumumROISize\":None,\n",
    "    \"normalize\":True, # weighted images = True\n",
    "    \"normalizeScale\":100,\n",
    "    \"removeOutliers\":None,\n",
    "    \"resampledPixelSpacing\":None, # for sampling\n",
    "    \"interpolator\":None,\n",
    "    \"preCrop\":True,\n",
    "    \"padDistance\":1,\n",
    "    \"label\":0,\n",
    "    \"additionalInfo\":True,\n",
    "    \"voxelArrayShift\":300\n",
    "}\n",
    "lb2_settings = {\n",
    "   \n",
    "}\n",
    "lb3_settings = {\n",
    "    \"binWidth\":10,\n",
    "    \"minimumROIDimensions\":2,\n",
    "    \"minumumROISize\":None,\n",
    "    \"normalize\":True, # weighted images = True\n",
    "    \"normalizeScale\":100,\n",
    "    \"removeOutliers\":None,\n",
    "    \"resampledPixelSpacing\":None, # for sampling\n",
    "    \"interpolator\":None,\n",
    "    \"preCrop\":True,\n",
    "    \"padDistance\":1,\n",
    "    \"label\":2,\n",
    "    \"additionalInfo\":True,\n",
    "    \"voxelArrayShift\":300\n",
    "}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [],
   "source": [
    "def rfe_commence(orig, mask, settings):\n",
    "    fo_features = firstorder.RadiomicsFirstOrder(orig, mask, **settings)\n",
    "    fo_features.disableAllFeatures()\n",
    "    fo_features.enableAllFeatures()\n",
    "    sh_features = shape.RadiomicsShape(orig, mask, **settings)\n",
    "    sh_features.disableAllFeatures()\n",
    "    sh_features.enableAllFeatures()\n",
    "    glcm_features = glcm.RadiomicsGLCM(orig, mask, **settings)\n",
    "    glcm_features.disableAllFeatures()\n",
    "    glcm_features.enableAllFeatures()\n",
    "    ngtdm_features = ngtdm.RadiomicsNGTDM(orig, mask, **settings)\n",
    "    ngtdm_features.disableAllFeatures()\n",
    "    ngtdm_features.enableAllFeatures()\n",
    "    \n",
    "    fo_result = fo_features.execute()\n",
    "    sh_result = sh_features.execute()\n",
    "    glcm_result = glcm_features.execute()\n",
    "    ngtdm_result = ngtdm_features.execute()\n",
    "    \n",
    "    def zscore(data):# I'm not sure in which scope i should apply this\n",
    "        mean = np.mean(data)\n",
    "        std = np.std(data)\n",
    "        z_scores = [(x - mean) / std for x in data]\n",
    "        return z_scores\n",
    "\n",
    "    def packup(fo, sh, glcm, ngtdm):# hit?\n",
    "        fo = [val for val in six.itervalues(fo)]\n",
    "        fo_score = zscore(fo)\n",
    "        sh = [val for val in six.itervalues(sh)]\n",
    "        sh_score = zscore(sh)\n",
    "        glcm = [val for val in six.itervalues(glcm)]\n",
    "        glcm_score = zscore(glcm)\n",
    "        ngtdm = [val for val in six.itervalues(ngtdm)]\n",
    "        ngtdm_score = zscore(ngtdm)\n",
    "        return {\"fo\":fo_score, \"sh\":sh_score, \"glcm\":glcm_score, \"ngtdm\":ngtdm_score}\n",
    "    \n",
    "    result_dic = packup(fo_result, sh_result, glcm_result, ngtdm_result)\n",
    "    return result_dic\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "target = 2\n",
    "benign_result = rfe_commence(swi_list[target], cmb_list[target], lb1_settings)\n",
    "cmb_result = rfe_commence(swi_list[target], cmb_list[target], lb2_settings) \n",
    "cal_result = rfe_commence(swi_list[target], cmb_list[target], lb3_settings)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2023-10-25 01:44:32,098 - Initializing feature class\n",
      "2023-10-25 01:44:32,149 - Discretizing gray levels inside ROI\n"
     ]
    },
    {
     "ename": "ValueError",
     "evalue": "min() arg is an empty sequence",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)",
      "\u001b[0;32m/tmp/ipykernel_474/2257777118.py\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mcmb_result\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mrfe_commence\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mswi_list\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mtarget\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcmb_list\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mtarget\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlb2_settings\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[0;32m/tmp/ipykernel_474/358433602.py\u001b[0m in \u001b[0;36mrfe_commence\u001b[0;34m(orig, mask, settings)\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;32mdef\u001b[0m \u001b[0mrfe_commence\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0morig\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmask\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msettings\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m     \u001b[0mfo_features\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mfirstorder\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mRadiomicsFirstOrder\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0morig\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmask\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0msettings\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      3\u001b[0m     \u001b[0mfo_features\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdisableAllFeatures\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m     \u001b[0mfo_features\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0menableAllFeatures\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m     \u001b[0msh_features\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mshape\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mRadiomicsShape\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0morig\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmask\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0msettings\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/usr/local/lib/python3.7/site-packages/radiomics/firstorder.py\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, inputImage, inputMask, **kwargs)\u001b[0m\n\u001b[1;32m     35\u001b[0m     \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpixelSpacing\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0minputImage\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mGetSpacing\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     36\u001b[0m     \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mvoxelArrayShift\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mkwargs\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'voxelArrayShift'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 37\u001b[0;31m     \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdiscretizedImageArray\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_applyBinning\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mimageArray\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcopy\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     38\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     39\u001b[0m   \u001b[0;32mdef\u001b[0m \u001b[0m_initVoxelBasedCalculation\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/usr/local/lib/python3.7/site-packages/radiomics/base.py\u001b[0m in \u001b[0;36m_applyBinning\u001b[0;34m(self, matrix)\u001b[0m\n\u001b[1;32m    113\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    114\u001b[0m   \u001b[0;32mdef\u001b[0m \u001b[0m_applyBinning\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmatrix\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 115\u001b[0;31m     \u001b[0mmatrix\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0m_\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mimageoperations\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mbinImage\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmatrix\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmaskArray\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msettings\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    116\u001b[0m     \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcoefficients\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'grayLevels'\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnumpy\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0munique\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmatrix\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmaskArray\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    117\u001b[0m     \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcoefficients\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'Ng'\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnumpy\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmax\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcoefficients\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'grayLevels'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m  \u001b[0;31m# max gray level in the ROI\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/usr/local/lib/python3.7/site-packages/radiomics/imageoperations.py\u001b[0m in \u001b[0;36mbinImage\u001b[0;34m(parameterMatrix, parameterMatrixCoordinates, **kwargs)\u001b[0m\n\u001b[1;32m    153\u001b[0m     \u001b[0mdiscretizedParameterMatrix\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnumpy\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdigitize\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mparameterMatrix\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mbinEdges\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    154\u001b[0m   \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 155\u001b[0;31m     \u001b[0mbinEdges\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mgetBinEdges\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mparameterMatrix\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mparameterMatrixCoordinates\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    156\u001b[0m     \u001b[0mdiscretizedParameterMatrix\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mparameterMatrixCoordinates\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnumpy\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdigitize\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mparameterMatrix\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mparameterMatrixCoordinates\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mbinEdges\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    157\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/usr/local/lib/python3.7/site-packages/radiomics/imageoperations.py\u001b[0m in \u001b[0;36mgetBinEdges\u001b[0;34m(parameterValues, **kwargs)\u001b[0m\n\u001b[1;32m    114\u001b[0m     \u001b[0mbinEdges\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m+=\u001b[0m \u001b[0;36m1\u001b[0m  \u001b[0;31m# Ensures that the maximum value is included in the topmost bin when using numpy.digitize\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    115\u001b[0m   \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 116\u001b[0;31m     \u001b[0mminimum\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmin\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mparameterValues\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    117\u001b[0m     \u001b[0mmaximum\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmax\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mparameterValues\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    118\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mValueError\u001b[0m: min() arg is an empty sequence"
     ]
    }
   ],
   "source": [
    "cmb_result = rfe_commence(swi_list[target], cmb_list[target], lb2_settings)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "9011200"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(cmb_list[2])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "False"
      ]
     },
     "execution_count": 70,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "torch.cuda.is_available()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "first order: 18\n",
      "shape: 14\n",
      "glcm: 24\n",
      "ngtdm: 5\n"
     ]
    }
   ],
   "source": [
    "print(f'first order: {len(result[\"fo\"])}\\nshape: {len(result[\"sh\"])}\\nglcm: {len(result[\"glcm\"])}\\nngtdm: {len(result[\"ngtdm\"])}')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<hr style=\"color:lightblue\">\n",
    "INPUT\n",
    "<hr style=\"color:lightblue\">"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "metadata": {},
   "outputs": [],
   "source": [
    "swi_monai = LoadImage(image_only=True, ensure_channel_first=True, simple_keys=True)(swi_list[0])\n",
    "cmb_monai = LoadImage(image_only=True, ensure_channel_first=True, simple_keys=True)(cmb_list[0])\n",
    "t1_monai = LoadImage(image_only=True, ensure_channel_first=True, simple_keys=True)(t1_list[0])\n",
    "# it's a tensor"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "torch.Size([1, 320, 352, 80])"
      ]
     },
     "execution_count": 71,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "swi_monai.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "metadata": {},
   "outputs": [],
   "source": [
    "input_meta = torch.tensor(result[\"fo\"]+result[\"sh\"]+result[\"glcm\"]+result[\"ngtdm\"])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "metadata": {},
   "outputs": [],
   "source": [
    "input_meta = input_meta.view(1, -1) # add one channel\n",
    "input_meta.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<hr style=\"color:pink\">\n",
    "TENSOR CONCAT TEST\n",
    "<hr style=\"color:pink\">"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 135,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "tensor([[-1, -3, -5, -7,  1,  2,  3,  4,  5,  6,  7,  8,  9, 19]])\n",
      "torch.Size([1, 14])\n"
     ]
    }
   ],
   "source": [
    "concat_test = torch.cat((torch.tensor([[-1, -3, -5, -7]]), torch.tensor([[1, 2, 3, 4, 5, 6, 7, 8, 9, 19]])), dim= 1)\n",
    "print(concat_test)\n",
    "print(concat_test.shape)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<hr style=\"color:lightgreen\">\n",
    "LAYERS\n",
    "<hr style=\"color:lightgreen\">"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "classNum = 3\n",
    "class CMBWATCHDOG(nn.Module):\n",
    "    def __init__(self, classes):\n",
    "        super(CMBWATCHDOG, self).__init__()\n",
    "        \n",
    "        self.conv1 = nn.Conv3d(1, 32, kernel_size=3)\n",
    "        self.maxp1 = nn.MaxPool3d(kernel_size=2)\n",
    "        \n",
    "        self.bnorm = nn.BatchNorm3d()\n",
    "        \n",
    "        self.conv2 = nn.Conv3d(32, 64, kernel_size=3)\n",
    "        self.maxp2 = nn.MaxPool3d(kernel_size=2)\n",
    "        \n",
    "        self.flat = nn.Flatten()\n",
    "        \n",
    "        self.dense1 = nn.Linear(64, 128)\n",
    "        self.drop = nn.Dropout(0.5)\n",
    "        \n",
    "        self.dense2 = nn.Linear(128, 61)\n",
    "        \n",
    "        self.concat = \n",
    "        \n",
    "    def forward(self, x):\n",
    "        \n",
    "        x = torch.relu(self.conv1(x))\n",
    "        x = self.maxp1(x)\n",
    "        x = self.bnorm(x)\n",
    "        x = torch.relu(self.conv2(x))\n",
    "        x = self.maxp2(x)\n",
    "        x = self.bnorm(x)\n",
    "        \n",
    "        x = self.flat(x)\n",
    "        \n",
    "        x = self.dense1(x)\n",
    "        x = self.drop(x)\n",
    "        x = self.dense2(x)\n",
    "        x = self.drop(x)\n",
    "        return x\n",
    "    \n",
    "model = CMBWATCHDOG(classNum)\n",
    "ts.summary(model, (2,2,2))"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.17"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
